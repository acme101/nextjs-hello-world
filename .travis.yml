sudo: required
services:
  - docker
# Cache our Gcloud SDK between commands
cache:
  directories:
  - "$HOME/google-cloud-sdk/"
env:
  global:
    CI_BUILD_TIME: $(date -u +"%Y-%m-%dT%H:%M:%SZ")
    CI_BUILD_ID: $TRAVIS_BUILD_ID
    CI_BUILD_REF: $TRAVIS_COMMIT
    CI_BUILD_REF_NAME: $TRAVIS_BRANCH
    CI_BUILD_NUMBER: $TRAVIS_BUILD_NUMBER
    CI_BUILDER: travis-ci
    CI_PROJECT_NAME: $TRAVIS_REPO_SLUG

before_install:
  # install the latest docker and docker-compose versions
  - sudo apt-get remove docker docker-engine
  - sudo curl -sSL https://get.docker.com/ | sh
  - sudo rm /usr/local/bin/docker-compose
  # the latest docker-compose version
  - export DOCKER_COMPOSE_VERSION=$(curl -s https://api.github.com/repos/docker/compose/releases/latest | grep 'tag_name' | cut -d\" -f4)
  - curl -L https://github.com/docker/compose/releases/download/${DOCKER_COMPOSE_VERSION}/docker-compose-`uname -s`-`uname -m` > docker-compose
  - chmod +x docker-compose
  - sudo mv docker-compose /usr/local/bin
  - docker --version
  - docker-compose --version
  # install google-cloud-sdk
  # Make sure gcloud command is on our PATH
  - export PATH=$PATH:${HOME}/google-cloud-sdk/bin
  - export CLOUDSDK_CORE_DISABLE_PROMPTS=1
  # If the SDK is not already cached, download it and unpack it
  - if [ ! -d ${HOME}/google-cloud-sdk ]; then
       curl https://sdk.cloud.google.com | bash;
    fi
  - gcloud version
  # install helm
  - curl https://raw.githubusercontent.com/kubernetes/helm/master/scripts/get | bash
  - helm version
before_script:
- export CI_REGISTRY_IMAGE=$DOCKER_USER/$DOCKER_REPO
- export IMG_TAG=`if [ "$TRAVIS_BRANCH" == "master" ]; then echo "latest"; else echo $TRAVIS_BRANCH | sed -e 's/[\/]/-/g' | sed -e 's/[\#]//g'; fi`
- export DOCKER_IMAGE_PROD=$CI_REGISTRY_IMAGE:$IMG_TAG
script:
- docker-compose run --rm dev yarn
# run and check the dev container
# build, run and check the prod image
- docker-compose run --rm dev yarn run build
- docker-compose -f docker-compose.yml -f docker-compose.prod.yml build prod

after_success:
- docker login -u=$DOCKER_USERNAME -p=$DOCKER_PASSWORD
- docker push $DOCKER_IMAGE_PROD
